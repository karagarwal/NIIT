/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package NIIT.stud;

import NIIT.stud.swing.plaf.MultiLineLabelUI;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.geom.Rectangle2D;
import java.beans.PropertyVetoException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import static javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS;
import javax.swing.Timer;
import javax.swing.border.Border;

/**
 *
 * @author Dev
 */
public class showQues extends javax.swing.JInternalFrame {
    String numOfQuestions, ques, a, b, c, d, SQL, ans, RBans, gettingAns[], course, studName, studID;
    private Boolean[] attempted, review;
    Boolean show_hide = false;
    private int count, i=1, timerMin, timerSec = 60, locx = 2, locy = 2, counter = 1, pos=0;
    
    JLabel[] label2;
    
    private ButtonGroup group = new ButtonGroup();
    private GroupButtonUtils select = new GroupButtonUtils();
    Connection con = null;
    Statement stmt = null;
    ResultSet rs = null;
    Border border = BorderFactory.createLineBorder(Color.gray, 1);
    URL falseURL = showQues.class.getResource("icon/falseicon.png");
    URL trueURL = showQues.class.getResource("icon/trueicon.png");
    URL notiURL = showQues.class.getResource("icon/warn.png");
    URL TimerAlertURL = showQues.class.getResource("icon/timer_clock_alert.png");
    
    ImageIcon trueicon = new ImageIcon(trueURL);
    ImageIcon falseicon = new ImageIcon(falseURL);
    ImageIcon notiicon = new ImageIcon(notiURL);
    ImageIcon TimerAlertIcon = new ImageIcon(TimerAlertURL);
    
    Main chkFrame;
    Timer t;
    
    Font font = new Font("Calibri", Font.PLAIN, 18);
    FontMetrics metrics = new FontMetrics(font) {};
    /**
     * Creates new form showQues
     */
    public showQues(String s, String course, String studName, String studID, Main chkFrame) {
        initComponents();
        this.numOfQuestions = s;
        this.course = course;
        count = Integer.parseInt(numOfQuestions);
        this.attempted = new Boolean[count];
        review = new Boolean[count];
        java.util.Arrays.fill(review,false);
        this.studName = studName;
        this.studID = studID;
        this.chkFrame = chkFrame;
        gettingAns = new String[count];
        fetchQuestions();
        showQuestion();
        
        timerMin = Integer.parseInt(numOfQuestions);
        label2 = new JLabel[count];
        ReviewjLabel.setText("Mark this Question \nfor Review");
        ReviewjLabel.setUI(MultiLineLabelUI.labelUI);
        attemptedPane();
        
        group.add(RButa);
        group.add(RButb);
        group.add(RButc);
        group.add(RButd);
        
        backjButton1.setEnabled(false);
        nextjButton1.setEnabled(false);
        
        t = new Timer(1000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                timerSec--;
                TimerjLabel.setText("  Time Left : "+Integer.toString(timerMin)+" : "+Integer.toString(timerSec));
                if(timerSec == 0 && timerMin > 0){
                    timerSec= 60;
                    timerMin--;
                }
                
                else if(timerSec == 0 && timerMin == 0){
                    ((Timer)e.getSource()).stop();
                    submitTest(true);
                }
                
                if(timerMin<=5){
                    TimerLabel.setIcon(TimerAlertIcon);
                    TimerjLabel.setBackground(Color.red);
                }
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        quesPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        showQ = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        chA = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        chB = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        chC = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        chD = new javax.swing.JLabel();
        Qnum = new javax.swing.JLabel();
        RButa = new javax.swing.JRadioButton();
        RButb = new javax.swing.JRadioButton();
        RButc = new javax.swing.JRadioButton();
        RButd = new javax.swing.JRadioButton();
        nextjButton1 = new javax.swing.JButton();
        backjButton1 = new javax.swing.JButton();
        TimerPane = new javax.swing.JScrollPane();
        TimerjLabel = new javax.swing.JLabel();
        attemptedScroolPanel = new javax.swing.JScrollPane();
        attemptedPanel = new javax.swing.JPanel();
        showHideDetails = new javax.swing.JButton();
        ReviewjLabel = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        TimerLabel = new javax.swing.JLabel();

        setBackground(new java.awt.Color(204, 204, 204));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        try {
            setSelected(true);
        } catch (java.beans.PropertyVetoException e1) {
            e1.printStackTrace();
        }

        quesPanel.setBackground(new java.awt.Color(204, 204, 204));
        quesPanel.setOpaque(false);

        jScrollPane1.setBackground(new java.awt.Color(204, 204, 204));
        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setDoubleBuffered(true);
        jScrollPane1.setFocusCycleRoot(true);
        jScrollPane1.setFocusTraversalPolicyProvider(true);
        jScrollPane1.setInheritsPopupMenu(true);
        jScrollPane1.setMaximumSize(new java.awt.Dimension(950, 150));
        jScrollPane1.setMinimumSize(new java.awt.Dimension(950, 150));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(950, 150));

        showQ.setBackground(new java.awt.Color(255, 255, 255));
        showQ.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        showQ.setMaximumSize(new java.awt.Dimension(950, 150));
        showQ.setMinimumSize(new java.awt.Dimension(950, 150));
        showQ.setPreferredSize(new java.awt.Dimension(950, 400));
        jScrollPane1.setViewportView(showQ);

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        jScrollPane2.setMaximumSize(new java.awt.Dimension(440, 150));
        jScrollPane2.setMinimumSize(new java.awt.Dimension(440, 150));

        chA.setBackground(new java.awt.Color(255, 255, 255));
        chA.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        chA.setMaximumSize(new java.awt.Dimension(440, 160));
        chA.setMinimumSize(new java.awt.Dimension(440, 160));
        chA.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane2.setViewportView(chA);

        jScrollPane3.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        jScrollPane3.setMaximumSize(new java.awt.Dimension(440, 150));
        jScrollPane3.setMinimumSize(new java.awt.Dimension(440, 150));

        chB.setBackground(new java.awt.Color(255, 255, 255));
        chB.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        chB.setMaximumSize(new java.awt.Dimension(440, 160));
        chB.setMinimumSize(new java.awt.Dimension(440, 160));
        chB.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane3.setViewportView(chB);

        jScrollPane4.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane4.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        jScrollPane4.setMaximumSize(new java.awt.Dimension(440, 150));
        jScrollPane4.setMinimumSize(new java.awt.Dimension(440, 150));

        chC.setBackground(new java.awt.Color(255, 255, 255));
        chC.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        chC.setMaximumSize(new java.awt.Dimension(440, 160));
        chC.setMinimumSize(new java.awt.Dimension(440, 160));
        chC.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane4.setViewportView(chC);

        jScrollPane5.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        jScrollPane5.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane5.setFont(new java.awt.Font("Calibri", 0, 15)); // NOI18N
        jScrollPane5.setMaximumSize(new java.awt.Dimension(440, 150));
        jScrollPane5.setMinimumSize(new java.awt.Dimension(440, 150));

        chD.setBackground(new java.awt.Color(255, 255, 255));
        chD.setFont(new java.awt.Font("Calibri", 0, 18)); // NOI18N
        chD.setMaximumSize(new java.awt.Dimension(440, 160));
        chD.setMinimumSize(new java.awt.Dimension(440, 160));
        chD.setPreferredSize(new java.awt.Dimension(440, 500));
        jScrollPane5.setViewportView(chD);

        Qnum.setBackground(new java.awt.Color(102, 0, 204));
        Qnum.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        RButa.setText("A");
        RButa.setBorder(null);
        RButa.setPreferredSize(new java.awt.Dimension(25, 25));
        RButa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RButaActionPerformed(evt);
            }
        });
        RButa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RButaKeyPressed(evt);
            }
        });

        RButb.setText("B");
        RButb.setBorder(null);
        RButb.setPreferredSize(new java.awt.Dimension(25, 25));
        RButb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RButbActionPerformed(evt);
            }
        });
        RButb.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RButbKeyPressed(evt);
            }
        });

        RButc.setText("C");
        RButc.setBorder(null);
        RButc.setPreferredSize(new java.awt.Dimension(25, 25));
        RButc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RButcActionPerformed(evt);
            }
        });
        RButc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RButcKeyPressed(evt);
            }
        });

        RButd.setText("D");
        RButd.setBorder(null);
        RButd.setPreferredSize(new java.awt.Dimension(25, 25));
        RButd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RButdActionPerformed(evt);
            }
        });
        RButd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                RButdKeyPressed(evt);
            }
        });

        nextjButton1.setText("Next");
        nextjButton1.setBorder(null);
        nextjButton1.setBorderPainted(false);
        nextjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nextjButton1ActionPerformed(evt);
            }
        });
        nextjButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                nextjButton1KeyPressed(evt);
            }
        });

        backjButton1.setText("Back");
        backjButton1.setBorder(null);
        backjButton1.setBorderPainted(false);
        backjButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backjButton1ActionPerformed(evt);
            }
        });
        backjButton1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                backjButton1KeyPressed(evt);
            }
        });

        TimerPane.setBackground(new java.awt.Color(153, 153, 153));
        TimerPane.setBorder(null);
        TimerPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        TimerPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        TimerjLabel.setBackground(new java.awt.Color(102, 255, 0));
        TimerjLabel.setFont(new java.awt.Font("Comic Sans MS", 0, 14)); // NOI18N
        TimerjLabel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        TimerjLabel.setOpaque(true);
        TimerPane.setViewportView(TimerjLabel);

        attemptedScroolPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.ABOVE_TOP));
        attemptedScroolPanel.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        attemptedScroolPanel.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        attemptedScroolPanel.setMinimumSize(new java.awt.Dimension(130, 511));
        attemptedScroolPanel.setPreferredSize(new java.awt.Dimension(130, 511));

        attemptedPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        attemptedPanel.setAutoscrolls(true);
        attemptedPanel.setMinimumSize(new java.awt.Dimension(120, 501));
        attemptedPanel.setPreferredSize(new java.awt.Dimension(120, 501));

        javax.swing.GroupLayout attemptedPanelLayout = new javax.swing.GroupLayout(attemptedPanel);
        attemptedPanel.setLayout(attemptedPanelLayout);
        attemptedPanelLayout.setHorizontalGroup(
            attemptedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 122, Short.MAX_VALUE)
        );
        attemptedPanelLayout.setVerticalGroup(
            attemptedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 502, Short.MAX_VALUE)
        );

        attemptedScroolPanel.setViewportView(attemptedPanel);

        showHideDetails.setText("Show/Hide Details");
        showHideDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                showHideDetailsActionPerformed(evt);
            }
        });

        ReviewjLabel.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        ReviewjLabel.setText("     ");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/NIIT/stud/icon/warn.png"))); // NOI18N
        jButton1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        TimerLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/NIIT/stud/icon/timer_clock_small.png"))); // NOI18N

        javax.swing.GroupLayout quesPanelLayout = new javax.swing.GroupLayout(quesPanel);
        quesPanel.setLayout(quesPanelLayout);
        quesPanelLayout.setHorizontalGroup(
            quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quesPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(quesPanelLayout.createSequentialGroup()
                        .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(Qnum, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(TimerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(quesPanelLayout.createSequentialGroup()
                                .addComponent(TimerPane, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(quesPanelLayout.createSequentialGroup()
                                .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 955, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(quesPanelLayout.createSequentialGroup()
                                        .addGap(465, 465, 465)
                                        .addComponent(RButb, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(15, 15, 15)
                                .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(attemptedScroolPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(showHideDetails))
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(quesPanelLayout.createSequentialGroup()
                        .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(quesPanelLayout.createSequentialGroup()
                                .addComponent(RButc, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(10, 10, 10))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, quesPanelLayout.createSequentialGroup()
                                .addComponent(RButa, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(backjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(25, 25, 25)
                        .addComponent(RButd, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(10, 10, 10)
                        .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 440, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(quesPanelLayout.createSequentialGroup()
                                .addComponent(nextjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(246, 246, 246)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(ReviewjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(94, 94, 94))))
        );
        quesPanelLayout.setVerticalGroup(
            quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(quesPanelLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TimerPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TimerLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(quesPanelLayout.createSequentialGroup()
                        .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(quesPanelLayout.createSequentialGroup()
                                .addGap(70, 70, 70)
                                .addComponent(Qnum, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(quesPanelLayout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(quesPanelLayout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(RButa, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(quesPanelLayout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(RButb, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(quesPanelLayout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(quesPanelLayout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(RButd, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(quesPanelLayout.createSequentialGroup()
                                .addGap(90, 90, 90)
                                .addComponent(RButc, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(quesPanelLayout.createSequentialGroup()
                        .addComponent(showHideDetails)
                        .addGap(18, 18, 18)
                        .addComponent(attemptedScroolPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(quesPanelLayout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(quesPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(nextjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(backjButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(ReviewjLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(quesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 1190, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(quesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    public void startTimer(){
        t.start();
        nextjButton1.setEnabled(true);
    }
    
    public void stopTimer(){
        t.stop();
    }
    
    private void showHideDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_showHideDetailsActionPerformed
        attemptedScroolPanel.setVisible(show_hide);
        show_hide = !show_hide;
    }//GEN-LAST:event_showHideDetailsActionPerformed

    private void backjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backjButton1ActionPerformed
        if(i==2)
            backjButton1.setEnabled(false);
        if(i==count)
            nextjButton1.setText("Next");

        i--;
        if(attempted[i-1] != null){
            if(gettingAns[i-1].equalsIgnoreCase("a"))
                RButa.setSelected(true);
            if(gettingAns[i-1].equalsIgnoreCase("b"))
                RButb.setSelected(true);
            if(gettingAns[i-1].equalsIgnoreCase("c"))
                RButc.setSelected(true);
            if(gettingAns[i-1].equalsIgnoreCase("d"))
                RButd.setSelected(true);
            RBans = gettingAns[i-1];
        }
        else{
            group.clearSelection();
            RBans = null;
        }
        try {
            rs.previous();
            rs.previous();
            //          ans = rs.getString("ans");

        } catch (SQLException ex) {
            Logger.getLogger(showQues.class.getName()).log(Level.SEVERE, null, ex);
        }
        showQuestion();
    }//GEN-LAST:event_backjButton1ActionPerformed

    private void nextjButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nextjButton1ActionPerformed
        if(RBans == null){                                       // #1
            attempted[i-1] = null;
            gettingAns[i-1] = null;
            if(!review[i-1])
               label2[i-1].setIcon(falseicon); 
        }
        
        if(i==1)
            backjButton1.setEnabled(true);                      // #2
        
        if(i==count-1)
            nextjButton1.setText("Submit");

        if(i!=count){
            i++;
            if(attempted[i-1] != null){
                if(gettingAns[i-1].equalsIgnoreCase("a"))
                    RButa.setSelected(true);
                if(gettingAns[i-1].equalsIgnoreCase("b"))
                    RButb.setSelected(true);
                if(gettingAns[i-1].equalsIgnoreCase("c"))
                    RButc.setSelected(true);
                if(gettingAns[i-1].equalsIgnoreCase("d"))
                    RButd.setSelected(true);
                RBans = gettingAns[i-1];
            }
            else{
                group.clearSelection();
                RBans = null;
            }
            showQuestion();
        }
        else
            submitTest(false);
    }//GEN-LAST:event_nextjButton1ActionPerformed

    private void RButdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RButdActionPerformed
        RBans = select.getSelectedButtonText(group);
        label2[i-1].setIcon(trueicon);
        attempted[i-1] = RBans.equalsIgnoreCase(ans);
        gettingAns[i-1] = RBans;
    }//GEN-LAST:event_RButdActionPerformed

    private void RButcActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RButcActionPerformed
        RBans = select.getSelectedButtonText(group);
        label2[i-1].setIcon(trueicon);
        attempted[i-1] = RBans.equalsIgnoreCase(ans);
        gettingAns[i-1] = RBans;
    }//GEN-LAST:event_RButcActionPerformed

    private void RButbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RButbActionPerformed
        RBans = select.getSelectedButtonText(group);
        label2[i-1].setIcon(trueicon);
        attempted[i-1] = RBans.equalsIgnoreCase(ans);
        gettingAns[i-1] = RBans;
    }//GEN-LAST:event_RButbActionPerformed

    private void RButaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RButaActionPerformed
        RBans = select.getSelectedButtonText(group);
        label2[i-1].setIcon(trueicon);
        attempted[i-1] = RBans.equalsIgnoreCase(ans);
        gettingAns[i-1] = RBans;
    }//GEN-LAST:event_RButaActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        label2[i-1].setIcon(notiicon);
        review[i-1] = true;
        attempted[i-1] = false;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void nextjButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_nextjButton1KeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            nextjButton1.doClick();
        if(evt.getKeyCode() == KeyEvent.VK_BACK_SPACE)
            backjButton1.doClick();
    }//GEN-LAST:event_nextjButton1KeyPressed

    private void backjButton1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_backjButton1KeyPressed
        if((evt.getKeyCode() == KeyEvent.VK_BACK_SPACE) || (evt.getKeyCode() == KeyEvent.VK_ENTER))
            backjButton1.doClick();
    }//GEN-LAST:event_backjButton1KeyPressed

    private void RButaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RButaKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            nextjButton1.doClick();
    }//GEN-LAST:event_RButaKeyPressed

    private void RButbKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RButbKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            nextjButton1.doClick();
    }//GEN-LAST:event_RButbKeyPressed

    private void RButcKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RButcKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            nextjButton1.doClick();
    }//GEN-LAST:event_RButcKeyPressed

    private void RButdKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_RButdKeyPressed
        if(evt.getKeyCode() == KeyEvent.VK_ENTER)
            nextjButton1.doClick();
    }//GEN-LAST:event_RButdKeyPressed

    private float getStringWidthPixels(String str){
        Rectangle2D bounds = metrics.getStringBounds(str, null);
        float width = (float) bounds.getWidth();
        return width;
    }
    
    private void fetchQuestions(){
        try {
            Class.forName("com.mysql.jdbc.Driver");
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/niitdb","root","");
            
            SQL = "SELECT * FROM " +course;
            
            stmt = con.createStatement();
            rs = stmt.executeQuery(SQL);
            
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(showQues.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
     
    private void showQuestion(){
        Dimension quesDimension = null;
        Dimension ansDimension = null;
        if(i==count)
            nextjButton1.setText("Submit");        
        try{
            if(rs.next()){
                ques = rs.getString("ques");
                a = rs.getString("a");
                b = rs.getString("b");
                c = rs.getString("c");
                d = rs.getString("d");
                ans = rs.getString("ans");

                quesDimension = new Dimension(924, (int) ((Math.ceil(getStringWidthPixels(ques)/940.0))*26));              
                showQ.setText(" "+ques);
                showQ.setPreferredSize(quesDimension);
                showQ.setUI(MultiLineLabelUI.labelUI);
                
                ansDimension = new Dimension(420, (int) ((Math.ceil(getStringWidthPixels(a)/440.0))*27));              
                chA.setText(" "+a);
                chA.setPreferredSize(ansDimension);
                chA.setUI(MultiLineLabelUI.labelUI);
                
                ansDimension = new Dimension(420, (int) ((Math.ceil(getStringWidthPixels(b)/440.0))*27));              
                chB.setText(" "+b);
                chB.setPreferredSize(ansDimension);
                chB.setUI(MultiLineLabelUI.labelUI);
                
                ansDimension = new Dimension(420, (int) ((Math.ceil(getStringWidthPixels(c)/440.0))*27));              
                chC.setText(" "+c);
                chC.setPreferredSize(ansDimension);
                chC.setUI(MultiLineLabelUI.labelUI);
                
                ansDimension = new Dimension(420, (int) ((Math.ceil(getStringWidthPixels(d)/440.0))*27));              
                chD.setText(" "+d);
                chD.setPreferredSize(ansDimension);
                chD.setUI(MultiLineLabelUI.labelUI);
                
                jScrollPane1.getVerticalScrollBar().setValue(0);
                jScrollPane2.getVerticalScrollBar().setValue(0);
                jScrollPane3.getVerticalScrollBar().setValue(0);
                jScrollPane4.getVerticalScrollBar().setValue(0);
                jScrollPane5.getVerticalScrollBar().setValue(0);
                
                Qnum.setText("Q"+i+".");
                
                quesPanel.repaint();
            }
        } catch (SQLException ex) {
            Logger.getLogger(showQues.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    private void submitTest(Boolean timeout){
        nextjButton1.setEnabled(false);
        backjButton1.setEnabled(false);
        this.setFocusable(false);
        this.setEnabled(false);
        this.setLayer(0);
        Submit showsubmit = new Submit(numOfQuestions, attempted, chkFrame, course, this);
        
        setRootPaneCheckingEnabled(false);
        javax.swing.plaf.InternalFrameUI ifu= showsubmit.getUI();
        ((javax.swing.plaf.basic.BasicInternalFrameUI)ifu).setNorthPane(null);
        ((javax.swing.plaf.basic.BasicInternalFrameUI)ifu).setSouthPane(null);
        ((javax.swing.plaf.basic.BasicInternalFrameUI)ifu).setEastPane(null);
        ((javax.swing.plaf.basic.BasicInternalFrameUI)ifu).setWestPane(null);
        this.getParent().add(showsubmit);
        
        Dimension desktop = this.getSize();
        Dimension jinternal = showsubmit.getSize();
        int width = (desktop.width - 110 - jinternal.width)/2;
        int height = (desktop.height - jinternal.height)/2;

        showsubmit.setLocation(width, height);
        try {
            showsubmit.setSelected(true);
        } catch (PropertyVetoException ex) {
            Logger.getLogger(showQues.class.getName()).log(Level.SEVERE, null, ex);
        }
        showsubmit.toFront();
        showsubmit.setVisible(true);
        
        if(timeout)
            showsubmit.forceSubmit();
    } 
     
    public void evalCancelled(){
        nextjButton1.setEnabled(true);
        backjButton1.setEnabled(true);
        this.setFocusable(true);
    }
     
    private void attemptedPane(){
        //String x1,x2;
        
        if((count>40)){
            int height = count-40;
            int remainder = 0;
            if((height%4)>0)
                remainder = 1;
            height = height/4 + remainder;
            height = height*50 + 2;
            Dimension panelSize = new Dimension(120,501 + height);
            Dimension scrollSize = new Dimension(160,450);
            attemptedPanel.setPreferredSize(panelSize);
            attemptedScroolPanel.setPreferredSize(scrollSize);
            attemptedScroolPanel.setVerticalScrollBarPolicy(VERTICAL_SCROLLBAR_ALWAYS);
        }
        else{
            int height = count;
            int remainder = 0;
            if((height%4)>0)
                remainder = 1;
            height = height/4 + remainder;
            height = height*50;
            Dimension panelSize = new Dimension(122,height);
            Dimension scrollSize = new Dimension(145,21 + height);
            attemptedPanel.setPreferredSize(panelSize);
            attemptedPanel.setMinimumSize(panelSize);
            attemptedScroolPanel.setPreferredSize(scrollSize);
            attemptedScroolPanel.setMinimumSize(scrollSize);
        }
        
        for(pos = 0; pos<count; pos++){
            //x1 = "label"+counter;
            //x2 = "label"+counter;
            JLabel label1 = new JLabel(" Q"+counter);
            label2[pos] = new JLabel(" ");
            
            attemptedPanel.add(label1);
            attemptedPanel.add(label2[pos]);
            label1.setSize(30,25);
            label2[pos].setSize(30,25);
            label1.setBorder(border);
            label2[pos].setBorder(border);
            label1.setLocation(locx, locy);
            label2[pos].setLocation(locx, locy+25);
            counter++;
            
            if(locx>=90){
                locx = 2;
                locy += 50;
            }
            else
                locx += 30;
        }
        attemptedPanel.repaint();
        attemptedScroolPanel.repaint();
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel Qnum;
    private javax.swing.JRadioButton RButa;
    private javax.swing.JRadioButton RButb;
    private javax.swing.JRadioButton RButc;
    private javax.swing.JRadioButton RButd;
    private javax.swing.JLabel ReviewjLabel;
    private javax.swing.JLabel TimerLabel;
    private javax.swing.JScrollPane TimerPane;
    private javax.swing.JLabel TimerjLabel;
    private javax.swing.JPanel attemptedPanel;
    private javax.swing.JScrollPane attemptedScroolPanel;
    private javax.swing.JButton backjButton1;
    private javax.swing.JLabel chA;
    private javax.swing.JLabel chB;
    private javax.swing.JLabel chC;
    private javax.swing.JLabel chD;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JButton nextjButton1;
    private javax.swing.JPanel quesPanel;
    private javax.swing.JButton showHideDetails;
    private javax.swing.JLabel showQ;
    // End of variables declaration//GEN-END:variables
}
